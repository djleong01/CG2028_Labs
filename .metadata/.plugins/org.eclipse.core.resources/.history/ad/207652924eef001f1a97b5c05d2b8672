/*
 * asm_func.s
 *
 *  Created on: 7/2/2025
 *      Author: Hou Linxin
 */
   .syntax unified
	.cpu cortex-m4
	.fpu softvfp
	.thumb

		.global asm_func

@ Start of executable code
.section .text

@ CG/[T]EE2028 Assignment 1, Sem 2, AY 2024/25
@ (c) ECE NUS, 2025

@ Write Student 1’s Name here: Zhang Yijian
@ Write Student 2’s Name here: Leong Deng Jun

@ Look-up table for registers:

@ R0 2D array for building slots
@ R1 array for entry events
@ R2 array for exit events
@ R3 2D array for results
@ R4 value of F*S = # of elements
@ R5 loop counter i
@ R6 holding the loop limit (5 - # of entry events)
@ ...

@ Offset = ((i * S) + j) *4

@ write your program from here:

// return value from asm back to C program, R0 register is used
asm_func:
	LDR R4, [R3]		// Load value of result[0][0], which is F
	LDR R5, [R3, #4]	// Load value of result[0][1], which is S
	MUL R4, R4, R5		// Multiply to get R

	MOV	R5, #0			// R5 serving as loop counter i
	MOV R6, #5			// R6 holding loop limit, which is 5 (# of entering events)

FIRST_FOR_LOOP:
	CMP R5, R6			// compare i with 5
	BGE LOOP_EXIT		// if i>=5, exit loop

	LDR	R7, [R0, R5, LSL #2]	// load from R0 address + (i*4) into R7


	ADD R4, R4, #1		// i++
	FIRST_FOR_LOOP	// jump back to start of the loop

LOOP_EXIT:

	BX LR

// 	PUSH {R14} // saves caller's link register

//	BL SUBROUTINE // call SUBROUTINE. LR(R14) now holds the return address

// 	POP {R14} // restore the original link register

//	BX LR // return from asm_func

//SUBROUTINE:

//	BX LR // return to the caller using the LR
