/*
 * asm_func.s
 *
 *  Created on: 7/2/2025
 *      Author: Hou Linxin
 */
   .syntax unified
	.cpu cortex-m4
	.fpu softvfp
	.thumb

		.global asm_func

@ Start of executable code
.section .text

@ CG/[T]EE2028 Assignment 1, Sem 2, AY 2024/25
@ (c) ECE NUS, 2025

@ Write Student 1’s Name here: Zhang Yijian
@ Write Student 2’s Name here: Leong Deng Jun

@ Look-up table for registers:

@ R0 ...
@ R1 ...
@ ...

@ write your program from here:

// building == R0 reg, entry == R1, exit == R2, result == R3
// return value from asm back to C program, R0 register is used
asm_func:
	LDR R4, [R3]		; Load value of result[0][0], which is F
	LDR R5, [R3], #4	; Load value of result[0][1], which is S
	//MOV	R4, #0			; R4 serving as loop counter i
	//MOV R5, #5			; R5 holding loop limit, which is 5 (# of entering events)

//FIRST_FOR_LOOP:
	//CMP R4, R5			; compare i with 5
	//BGE LOOP_EXIT		; if i>=5, exit loop

	//LSL R4, R0, #2		; R4 = loop counter*4 (compute addy of curr element)
	//ADD R6, R0, R4		; R6 = address of arr element

	//ADD R4, R4, #1		; i++
	//B FIRST_FOR_LOOP	; jump back to start of the loop

//LOOP_EXIT:

	//END

// 	PUSH {R14} // saves caller's link register

//	BL SUBROUTINE // call SUBROUTINE. LR(R14) now holds the return address

// 	POP {R14} // restore the original link register

//	BX LR // return from asm_func

//SUBROUTINE:

//	BX LR // return to the caller using the LR
